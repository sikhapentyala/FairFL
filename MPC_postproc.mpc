from Compiler import mpc_math, util
from Compiler.types import *
import math


# We cannot know the number of samples , can we?
# Since we use fedAvg, I assume that this can be a public value
# But we do not make this public in preprocessing
# tot, cs0, cs1 are secret-shared, cannot use secret shared to declare variables.
N = 26160

# Matrix might not allow to have probs as sifx and other two as sint
# Two ways convert everything into sfix or take every input separately
#data = sfix.Matrix(N,3) # [s, label, score]


sensitive_values = sint.Array(N)
labels = sint.Array(N)
probs = sfix.Array(N)

sensitive_values.input_from(0)
labels.input_from(0)
probs.input_from(0)

### STEP 0 : Code for Laplacian noise
eps_ = 1

def compute_lap_noise(sens=1,eps=eps_):
        myscale = 1
        u = sfix.get_random(-0.5,0.5)
        p = (u>=0)
        sgnU = 2*p-1
        absU = sgnU * u
        #absU = mpc_math.abs_fx(U)
        #sgnU = U.__truediv__(absU)
        ln_value = 1 - 2 * absU
        noise = -1 * myscale * sgnU * mpc_math.log_fx(ln_value, math.e)
        return noise

thresholds = [0.,0.00099099,0.00198198,0.00297297,0.00396396,0.00495495
,0.00594595,0.00693694,0.00792793,0.00891892,0.00990991,0.0109009
,0.01189189,0.01288288,0.01387387,0.01486486,0.01585586,0.01684685
,0.01783784,0.01882883,0.01981982,0.02081081,0.0218018,0.02279279
,0.02378378,0.02477477,0.02576577,0.02675676,0.02774775,0.02873874
,0.02972973,0.03072072,0.03171171,0.0327027,0.03369369,0.03468468
,0.03567568,0.03666667,0.03765766,0.03864865,0.03963964,0.04063063
,0.04162162,0.04261261,0.0436036,0.04459459,0.04558559,0.04657658
,0.04756757,0.04855856,0.04954955,0.05054054,0.05153153,0.05252252
,0.05351351,0.0545045,0.0554955,0.05648649,0.05747748,0.05846847
,0.05945946,0.06045045,0.06144144,0.06243243,0.06342342,0.06441441
,0.06540541,0.0663964,0.06738739,0.06837838,0.06936937,0.07036036
,0.07135135,0.07234234,0.07333333,0.07432432,0.07531532,0.07630631
,0.0772973,0.07828829,0.07927928,0.08027027,0.08126126,0.08225225
,0.08324324,0.08423423,0.08522523,0.08621622,0.08720721,0.0881982
,0.08918919,0.09018018,0.09117117,0.09216216,0.09315315,0.09414414
,0.09513514,0.09612613,0.09711712,0.09810811,0.0990991,0.10009009
,0.10108108,0.10207207,0.10306306,0.10405405,0.10504505,0.10603604
,0.10702703,0.10801802,0.10900901,0.11,0.11099099,0.11198198
,0.11297297,0.11396396,0.11495495,0.11594595,0.11693694,0.11792793
,0.11891892,0.11990991,0.1209009,0.12189189,0.12288288,0.12387387
,0.12486486,0.12585586,0.12684685,0.12783784,0.12882883,0.12981982
,0.13081081,0.1318018,0.13279279,0.13378378,0.13477477,0.13576577
,0.13675676,0.13774775,0.13873874,0.13972973,0.14072072,0.14171171
,0.1427027,0.14369369,0.14468468,0.14567568,0.14666667,0.14765766
,0.14864865,0.14963964,0.15063063,0.15162162,0.15261261,0.1536036
,0.15459459,0.15558559,0.15657658,0.15756757,0.15855856,0.15954955
,0.16054054,0.16153153,0.16252252,0.16351351,0.1645045,0.1654955
,0.16648649,0.16747748,0.16846847,0.16945946,0.17045045,0.17144144
,0.17243243,0.17342342,0.17441441,0.17540541,0.1763964,0.17738739
,0.17837838,0.17936937,0.18036036,0.18135135,0.18234234,0.18333333
,0.18432432,0.18531532,0.18630631,0.1872973,0.18828829,0.18927928
,0.19027027,0.19126126,0.19225225,0.19324324,0.19423423,0.19522523
,0.19621622,0.19720721,0.1981982,0.19918919,0.20018018,0.20117117
,0.20216216,0.20315315,0.20414414,0.20513514,0.20612613,0.20711712
,0.20810811,0.2090991,0.21009009,0.21108108,0.21207207,0.21306306
,0.21405405,0.21504505,0.21603604,0.21702703,0.21801802,0.21900901
,0.22,0.22099099,0.22198198,0.22297297,0.22396396,0.22495495
,0.22594595,0.22693694,0.22792793,0.22891892,0.22990991,0.2309009
,0.23189189,0.23288288,0.23387387,0.23486486,0.23585586,0.23684685
,0.23783784,0.23882883,0.23981982,0.24081081,0.2418018,0.24279279
,0.24378378,0.24477477,0.24576577,0.24675676,0.24774775,0.24873874
,0.24972973,0.25072072,0.25171171,0.2527027,0.25369369,0.25468468
,0.25567568,0.25666667,0.25765766,0.25864865,0.25963964,0.26063063
,0.26162162,0.26261261,0.2636036,0.26459459,0.26558559,0.26657658
,0.26756757,0.26855856,0.26954955,0.27054054,0.27153153,0.27252252
,0.27351351,0.2745045,0.2754955,0.27648649,0.27747748,0.27846847
,0.27945946,0.28045045,0.28144144,0.28243243,0.28342342,0.28441441
,0.28540541,0.2863964,0.28738739,0.28837838,0.28936937,0.29036036
,0.29135135,0.29234234,0.29333333,0.29432432,0.29531532,0.29630631
,0.2972973,0.29828829,0.29927928,0.30027027,0.30126126,0.30225225
,0.30324324,0.30423423,0.30522523,0.30621622,0.30720721,0.3081982
,0.30918919,0.31018018,0.31117117,0.31216216,0.31315315,0.31414414
,0.31513514,0.31612613,0.31711712,0.31810811,0.3190991,0.32009009
,0.32108108,0.32207207,0.32306306,0.32405405,0.32504505,0.32603604
,0.32702703,0.32801802,0.32900901,0.33,0.33099099,0.33198198
,0.33297297,0.33396396,0.33495495,0.33594595,0.33693694,0.33792793
,0.33891892,0.33990991,0.3409009,0.34189189,0.34288288,0.34387387
,0.34486486,0.34585586,0.34684685,0.34783784,0.34882883,0.34981982
,0.35081081,0.3518018,0.35279279,0.35378378,0.35477477,0.35576577
,0.35675676,0.35774775,0.35873874,0.35972973,0.36072072,0.36171171
,0.3627027,0.36369369,0.36468468,0.36567568,0.36666667,0.36765766
,0.36864865,0.36963964,0.37063063,0.37162162,0.37261261,0.3736036
,0.37459459,0.37558559,0.37657658,0.37756757,0.37855856,0.37954955
,0.38054054,0.38153153,0.38252252,0.38351351,0.3845045,0.3854955
,0.38648649,0.38747748,0.38846847,0.38945946,0.39045045,0.39144144
,0.39243243,0.39342342,0.39441441,0.39540541,0.3963964,0.39738739
,0.39837838,0.39936937,0.40036036,0.40135135,0.40234234,0.40333333
,0.40432432,0.40531532,0.40630631,0.4072973,0.40828829,0.40927928
,0.41027027,0.41126126,0.41225225,0.41324324,0.41423423,0.41522523
,0.41621622,0.41720721,0.4181982,0.41918919,0.42018018,0.42117117
,0.42216216,0.42315315,0.42414414,0.42513514,0.42612613,0.42711712
,0.42810811,0.4290991,0.43009009,0.43108108,0.43207207,0.43306306
,0.43405405,0.43504505,0.43603604,0.43702703,0.43801802,0.43900901
,0.44,0.44099099,0.44198198,0.44297297,0.44396396,0.44495495
,0.44594595,0.44693694,0.44792793,0.44891892,0.44990991,0.4509009
,0.45189189,0.45288288,0.45387387,0.45486486,0.45585586,0.45684685
,0.45783784,0.45882883,0.45981982,0.46081081,0.4618018,0.46279279
,0.46378378,0.46477477,0.46576577,0.46675676,0.46774775,0.46873874
,0.46972973,0.47072072,0.47171171,0.4727027,0.47369369,0.47468468
,0.47567568,0.47666667,0.47765766,0.47864865,0.47963964,0.48063063
,0.48162162,0.48261261,0.4836036,0.48459459,0.48558559,0.48657658
,0.48756757,0.48855856,0.48954955,0.49054054,0.49153153,0.49252252
,0.49351351,0.4945045,0.4954955,0.49648649,0.49747748,0.49846847
,0.49945946,0.50045045,0.50144144,0.50243243,0.50342342,0.50441441
,0.50540541,0.5063964,0.50738739,0.50837838,0.50936937,0.51036036
,0.51135135,0.51234234,0.51333333,0.51432432,0.51531532,0.51630631
,0.5172973,0.51828829,0.51927928,0.52027027,0.52126126,0.52225225
,0.52324324,0.52423423,0.52522523,0.52621622,0.52720721,0.5281982
,0.52918919,0.53018018,0.53117117,0.53216216,0.53315315,0.53414414
,0.53513514,0.53612613,0.53711712,0.53810811,0.5390991,0.54009009
,0.54108108,0.54207207,0.54306306,0.54405405,0.54504505,0.54603604
,0.54702703,0.54801802,0.54900901,0.55,0.55099099,0.55198198
,0.55297297,0.55396396,0.55495495,0.55594595,0.55693694,0.55792793
,0.55891892,0.55990991,0.5609009,0.56189189,0.56288288,0.56387387
,0.56486486,0.56585586,0.56684685,0.56783784,0.56882883,0.56981982
,0.57081081,0.5718018,0.57279279,0.57378378,0.57477477,0.57576577
,0.57675676,0.57774775,0.57873874,0.57972973,0.58072072,0.58171171
,0.5827027,0.58369369,0.58468468,0.58567568,0.58666667,0.58765766
,0.58864865,0.58963964,0.59063063,0.59162162,0.59261261,0.5936036
,0.59459459,0.59558559,0.59657658,0.59756757,0.59855856,0.59954955
,0.60054054,0.60153153,0.60252252,0.60351351,0.6045045,0.6054955
,0.60648649,0.60747748,0.60846847,0.60945946,0.61045045,0.61144144
,0.61243243,0.61342342,0.61441441,0.61540541,0.6163964,0.61738739
,0.61837838,0.61936937,0.62036036,0.62135135,0.62234234,0.62333333
,0.62432432,0.62531532,0.62630631,0.6272973,0.62828829,0.62927928
,0.63027027,0.63126126,0.63225225,0.63324324,0.63423423,0.63522523
,0.63621622,0.63720721,0.6381982,0.63918919,0.64018018,0.64117117
,0.64216216,0.64315315,0.64414414,0.64513514,0.64612613,0.64711712
,0.64810811,0.6490991,0.65009009,0.65108108,0.65207207,0.65306306
,0.65405405,0.65504505,0.65603604,0.65702703,0.65801802,0.65900901
,0.66,0.66099099,0.66198198,0.66297297,0.66396396,0.66495495
,0.66594595,0.66693694,0.66792793,0.66891892,0.66990991,0.6709009
,0.67189189,0.67288288,0.67387387,0.67486486,0.67585586,0.67684685
,0.67783784,0.67882883,0.67981982,0.68081081,0.6818018,0.68279279
,0.68378378,0.68477477,0.68576577,0.68675676,0.68774775,0.68873874
,0.68972973,0.69072072,0.69171171,0.6927027,0.69369369,0.69468468
,0.69567568,0.69666667,0.69765766,0.69864865,0.69963964,0.70063063
,0.70162162,0.70261261,0.7036036,0.70459459,0.70558559,0.70657658
,0.70756757,0.70855856,0.70954955,0.71054054,0.71153153,0.71252252
,0.71351351,0.7145045,0.7154955,0.71648649,0.71747748,0.71846847
,0.71945946,0.72045045,0.72144144,0.72243243,0.72342342,0.72441441
,0.72540541,0.7263964,0.72738739,0.72837838,0.72936937,0.73036036
,0.73135135,0.73234234,0.73333333,0.73432432,0.73531532,0.73630631
,0.7372973,0.73828829,0.73927928,0.74027027,0.74126126,0.74225225
,0.74324324,0.74423423,0.74522523,0.74621622,0.74720721,0.7481982
,0.74918919,0.75018018,0.75117117,0.75216216,0.75315315,0.75414414
,0.75513514,0.75612613,0.75711712,0.75810811,0.7590991,0.76009009
,0.76108108,0.76207207,0.76306306,0.76405405,0.76504505,0.76603604
,0.76702703,0.76801802,0.76900901,0.77,0.77099099,0.77198198
,0.77297297,0.77396396,0.77495495,0.77594595,0.77693694,0.77792793
,0.77891892,0.77990991,0.7809009,0.78189189,0.78288288,0.78387387
,0.78486486,0.78585586,0.78684685,0.78783784,0.78882883,0.78981982
,0.79081081,0.7918018,0.79279279,0.79378378,0.79477477,0.79576577
,0.79675676,0.79774775,0.79873874,0.79972973,0.80072072,0.80171171
,0.8027027,0.80369369,0.80468468,0.80567568,0.80666667,0.80765766
,0.80864865,0.80963964,0.81063063,0.81162162,0.81261261,0.8136036
,0.81459459,0.81558559,0.81657658,0.81756757,0.81855856,0.81954955
,0.82054054,0.82153153,0.82252252,0.82351351,0.8245045,0.8254955
,0.82648649,0.82747748,0.82846847,0.82945946,0.83045045,0.83144144
,0.83243243,0.83342342,0.83441441,0.83540541,0.8363964,0.83738739
,0.83837838,0.83936937,0.84036036,0.84135135,0.84234234,0.84333333
,0.84432432,0.84531532,0.84630631,0.8472973,0.84828829,0.84927928
,0.85027027,0.85126126,0.85225225,0.85324324,0.85423423,0.85522523
,0.85621622,0.85720721,0.8581982,0.85918919,0.86018018,0.86117117
,0.86216216,0.86315315,0.86414414,0.86513514,0.86612613,0.86711712
,0.86810811,0.8690991,0.87009009,0.87108108,0.87207207,0.87306306
,0.87405405,0.87504505,0.87603604,0.87702703,0.87801802,0.87900901
,0.88,0.88099099,0.88198198,0.88297297,0.88396396,0.88495495
,0.88594595,0.88693694,0.88792793,0.88891892,0.88990991,0.8909009
,0.89189189,0.89288288,0.89387387,0.89486486,0.89585586,0.89684685
,0.89783784,0.89882883,0.89981982,0.90081081,0.9018018,0.90279279
,0.90378378,0.90477477,0.90576577,0.90675676,0.90774775,0.90873874
,0.90972973,0.91072072,0.91171171,0.9127027,0.91369369,0.91468468
,0.91567568,0.91666667,0.91765766,0.91864865,0.91963964,0.92063063
,0.92162162,0.92261261,0.9236036,0.92459459,0.92558559,0.92657658
,0.92756757,0.92855856,0.92954955,0.93054054,0.93153153,0.93252252
,0.93351351,0.9345045,0.9354955,0.93648649,0.93747748,0.93846847
,0.93945946,0.94045045,0.94144144,0.94243243,0.94342342,0.94441441
,0.94540541,0.9463964,0.94738739,0.94837838,0.94936937,0.95036036
,0.95135135,0.95234234,0.95333333,0.95432432,0.95531532,0.95630631
,0.9572973,0.95828829,0.95927928,0.96027027,0.96126126,0.96225225
,0.96324324,0.96423423,0.96522523,0.96621622,0.96720721,0.9681982
,0.96918919,0.97018018,0.97117117,0.97216216,0.97315315,0.97414414
,0.97513514,0.97612613,0.97711712,0.97810811,0.9790991,0.98009009
,0.98108108,0.98207207,0.98306306,0.98405405,0.98504505,0.98603604
,0.98702703,0.98801802,0.98900901,0.99,1]
### STEP 2
###### Get ROCs

ROC_priv = sfix.Matrix(1001,3)
ROC_unpriv = sfix.Matrix(1001,3)
preds = sint.Array(N)
## For each thresholds
#@for_range(1001)
#def _(t):
for t in range(1001):
    curr_threshold = thresholds[t]

    ## get predictions
    #preds = sint.Array(N)
    @for_range_opt(N)
    def _(i):
            pred = (probs[i] >= curr_threshold)
            preds[i] = pred

    # tpr, fpr
    # Without knowing the number of P and N for each group (cannot use TP/P)
    # User TPR = (TP/TP+FN), FPR = (FP/TN+FP)

    # TP, FP, TN, FN
    cf_priv = sfix.Array(4)
    cf_unpriv = sfix.Array(4)

    @for_range(4)
    def _(i):
            cf_priv[i] = sfix(0)
            cf_unpriv[i] = sfix(0)

    @for_range(N)
    def _(i):
            label = labels[i]
            pred = preds[i]
            is_priv = sensitive_values[i]

            true_label = (label == 1)
            true_pred = (pred == 1)

            tp = true_label * true_pred
            true_label_priv = is_priv * true_label
            true_pred_priv = is_priv * true_pred
            tp_priv = is_priv * tp

            # TP
            cf_priv[0] = cf_priv[0] + tp_priv
            cf_unpriv[0] = cf_unpriv[0] + (tp - tp_priv)

            # FP
            cf_priv[1] = cf_priv[1] + (true_pred_priv -  tp_priv)
            cf_unpriv[1] = cf_unpriv[1] + (true_pred - true_pred_priv - tp + tp_priv)    #()

            # TN
            cf_priv[2] = cf_priv[2] + (is_priv - true_pred_priv -true_pred_priv+ tp_priv)
            cf_unpriv[2] = cf_unpriv[2] + (1 - true_label - true_pred + tp - is_priv + true_label_priv+ true_pred_priv - tp_priv)


            # FN
            cf_priv[3] = cf_priv[3] + (true_label_priv -  tp_priv)
            cf_unpriv[3] = cf_unpriv[3] + (true_label - true_pred_priv - tp + tp_priv)


                                                                                                                                                                                                                                            325,0-1       88%

    @for_range(4)
    def _(i):
            cf_priv[i] = cf_priv[i] + compute_lap_noise(1,eps_)
            cf_unpriv[i] = cf_unpriv[i] + compute_lap_noise(1,eps_)


    TPR_priv = cf_priv[0] / (cf_priv[0] + cf_priv[3])
    FPR_priv = cf_priv[1] / (cf_priv[1] + cf_priv[2])

    TPR_unpriv = cf_unpriv[0] / (cf_unpriv[0] + cf_unpriv[3])
    FPR_unpriv = cf_unpriv[1] / (cf_unpriv[1] + cf_unpriv[2])


    temp = sfix.Array(3)
    temp[2] = curr_threshold

    temp[0] = FPR_priv
    temp[1] = TPR_priv
    ROC_priv[t] = temp

    temp[0] = FPR_unpriv
    temp[1] = TPR_unpriv
    ROC_unpriv[t] = temp


@for_range(N)
def _(i):
        print_ln("%s,  %s",i,ROC_priv[i].reveal())
print_ln("===============================>")
@for_range(N)
def _(i):
        print_ln("%s,  %s",i,ROC_unpriv[i].reveal())
